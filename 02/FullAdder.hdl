// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/FullAdder.hdl

/**
 * Computes the sum of three bits.
 */

CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    Xor(a=b, b=c, out=xorbc);
    And(a=b, b=c, out=andbc);
    Xor(a=a, b=xorbc, out=sum);
    And(a=a, b=xorbc, out=w1);
    Or(a=andbc, b=w1, out=carry);
}

/*  Implementation note:

    a  b  c  | carry  sum
    0  0  0     0      0
    0  0  1     0      1
    0  1  0     0      1
    0  1  1     1      0
    1  0  0     0      1
    1  0  1     1      0
    1  1  0     1      0
    1  1  1     1      1

    Canonical forms:

    Sum (a, b, c)   = a'.b'.c + a'.b.c' + a.b'.c' + a.b.c
                    = a'.(b'.c + b.c') + a.(b'.c' + b.c)
                    = a'.Xor(b, c) + a.Not(Xor(b,c))
                    = Xor(a, Xor(b,c))

    Carry (a, b, c) = a'.b.c + a.b'.c + a.b.c' + a.b.c
                    = b.c.(a' + a) + a.(b'.c + b.c')
                    = b.c + a.Xor(b, c)
*/
