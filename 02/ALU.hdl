// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values,
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // 1. if (zx==1) set x = 0        // 16-bit constant

    // Insight: we can use a "false" bus
    Mux16(a=x, b=false, sel=zx, out=zxout);

        /* Original implementation:
           Not16(in=x, out=notx);
           Mux16(a=x, b=notx, sel=zx, out=xmuxnotx);
           And16(a=x, b=xmuxnotx, out=zxout);
        */


    // 2. if (nx==1) set x = ~x       // bitwise "not"

    Not16(in=zxout, out=notzxout);
    Mux16(a=zxout, b=notzxout, sel=nx, out=nxout);


    // 3. if (zy==1) set y = 0        // 16-bit constant

    // Insight: we can use a "false" bus
       Mux16(a=y, b=false, sel=zy, out=zyout);

        /* Original implementation:
           Not16(in=y, out=noty);
           Mux16(a=y, b=noty, sel=zy, out=ymuxnoty);
           And16(a=y, b=ymuxnoty, out=zyout);
        */


    // 4. if (ny==1) set y = ~y       // bitwise "not"

    Not16(in=zyout, out=notzyout);
    Mux16(a=zyout, b=notzyout, sel=ny, out=nyout);


    // 5. if (f==1)  set out = x + y  // integer 2's complement addition

    Add16(a=nxout, b=nyout, out=xplusy);
    And16(a=nxout, b=nyout, out=xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=fout);


    // 6. if (no==1) set out = ~out   // bitwise "not"

    Not16(in=fout, out=notfout);
    Mux16(a=fout, b=notfout, sel=no, out=zrout);
    And16(a=zrout, b=zrout, out=out);


    // 7. if (out==0) set zr = 1
    /* Insight: out=0 if bitwise OR operations on all 16 bits
       produces 0.

       Of all the gates built so far, only Or8Way gates perform
       bitwise OR operations out of the box.

       We need 8-bit inputs, but all we see are 16-bit buses,
       and we cannot fan out sub-buses from an existing bus.

       However, it turns out that we can set output bits in
       a controlled way.
    */
    And16(a=zrout, b=zrout, out[0..7]=zrlow);
    And16(a=zrout, b=zrout, out[8..15]=zrup);
    Or8Way(in=zrlow, out=zrlowbit);
    Or8Way(in=zrup, out=zrupbit);
    Or(a=zrlowbit, b=zrupbit, out=zrbit);
    Not(in=zrbit, out=zr);


    // 8. if (out<0) set ng = 1

    // Insight: the leftmost bit of all negative numbers is '1'.
    And16(a=zrout, b=zrout, out[15]=ng);
}
