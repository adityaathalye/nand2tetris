// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,
             sel=address[3..5],
             a=r0, b=r1, c=r2, d=r3,
             e=r4, f=r5, g=r6, h=r7);

    RAM8(in=in, load=r0, address=address[0..2], out=out0);
    RAM8(in=in, load=r1, address=address[0..2], out=out1);
    RAM8(in=in, load=r2, address=address[0..2], out=out2);
    RAM8(in=in, load=r3, address=address[0..2], out=out3);
    RAM8(in=in, load=r4, address=address[0..2], out=out4);
    RAM8(in=in, load=r5, address=address[0..2], out=out5);
    RAM8(in=in, load=r6, address=address[0..2], out=out6);
    RAM8(in=in, load=r7, address=address[0..2], out=out7);

    Mux8Way16(a=out0, b=out1, c=out2, d=out3,
              e=out4, f=out5, g=out6, h=out7,
              sel=address[3..5],
              out=out);
}
/*  Implementation note:

    Insight: Of the 6 address bits, use the 3 higher bits to
    set load bits that will select one of eight RAM8 chips.

    At the same time, feed the 3 lower bits of the address bit,
    simultaneously, to each of the eight RAM8 chips.

    The combined effect of the load bits and address[0..2] bits
    will cause only one of 64 registers to be set at a time.

    Then, setting the final output is a simple job for MUX8.*/
