// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor.
 * out = a if sel==00
 *       b if sel==01
 *       c if sel==10
 *       d if sel==11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=e);
    Mux16(a=c, b=d, sel=sel[0], out=f);
    Mux16(a=e, b=f, sel=sel[1], out=out);
}
/* Implementation note:

   The basic idea was to try and compose primitive muxes
   into this composite mux.

   Abstraction FTW!

   The reduced truth table for Mux4Way16 is:
   sel[1]  sel[0]  out
    0       0       a
    0       1       b
    1       0       c
    1       1       d

    The table gives us the canonical form as follows:
    (Taking a hint from the canonical form of the simplest Mux,
    Mux.hdl, which happens to be sel'.a + sel.b.)

      sel[1]'.sel[0]'.a
    + sel[1]'.sel[0].b
    + sel[1].sel[0]'.c
    + sel[1].sel[0].d

    This can be transformed to:
      sel[1]'.(sel[0]'.a + sel[0].b)
    + sel[1].(sel[0]'.c + sel[0].d)

    Which can be expressed as muxes:
      sel[1]'.Mux(a, b, sel[0])
    + sel[1].Mux(c, d, sel[0])

    And this itself is a mux pattern that can be expressed as:
      Mux(Mux(a, b, sel[0]),
          Mux(c, d, sel[0]),
          sel[1])
    */
